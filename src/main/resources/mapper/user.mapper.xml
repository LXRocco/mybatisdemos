<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<!--
    注意mybatis中，如果在mapper的xml文件中使用/*  */注释，可能会报异常The error may exist in mapper/user.mapper.xml

    Cause: org.apache.ibatis.builder.BuilderException:
    Error parsing SQL Mapper Configuration. Cause: org.apache.ibatis.builder.BuilderException:
    Error parsing Mapper XML. Cause: org.apache.ibatis.builder.BuilderException:
     Parsing error was found in mapping #{}. Check syntax #{property|(expression), var1=value1, var2=value2, ...}
-->

<!--
    mapper.xml开发规范：
        1、在mapper.xml中，namespace中的值为对应接口相对地址。<mapper namespace="com.mybatis.demos.mapper.UserMapper">
        2、mapper.java接口中的方法名和mapper.xml中对应statement的id一致。
        3、mapper.java接口中的方法输入参数类型和mapper.xml中对应statement的parameterType指定的类型一致。
        4、mapper.java接口中的方法的返回值类型和mapper.xml中对应statement的resultType指定的类型一致。

    只有满足以上4点，mybatis才会自动地生成mapper接口实现类代理对象。
-->
<mapper namespace="com.mybatis.demos.mapper.UserMapper">

    <!-- 开启本namespace范围下的二级缓存-->
    <cache />

    <!--
        resultMap  id 标识resultMap的唯一标识，type标识返回映射的对象类型

        resultMap可以实现延迟加载，resultType不可以实现延迟加载
     -->
    <resultMap id="userResultMap" type="com.mybatis.demos.domain.User">
        <!--
            配置直接映射
            <id> </id> 标签，指定查询类表中的唯一标识，如果多个字段组成一个唯一标识，那么需要配置多个<id></id>标签
            column 字段名， property resultMap映射的对象属性
         -->
        <id column="id" property="id"></id>
        <result column="username" property="username"></result>
        <result column="name" property="name"></result>
        <result column="password" property="password"></result>
        <result column="create_time" property="createTime"></result>
    </resultMap>
    
    
    <resultMap id="userItemMap" type="com.mybatis.demos.domain.User">
        <id column="id" property="id"></id>
        <result column="name" property="name"></result>
        <result column="username" property="username"></result>
        
        <collection property="orders" ofType="com.mybatis.demos.domain.Order">
            <id column="id" property="id"></id>
            <result column="order_num" property="orderNum"></result>
            <result column="note" property="note"></result>
            <result column="create_time" property="createTime"></result>

            <collection property="orderDetails" ofType="com.mybatis.demos.domain.OrderDetail">
                <id column="order_detail_id" property="orderDetailId"></id>
                <result column="item_id" property="itemId"></result>
                <result column="item_num" property="itemNum"></result>
                <association property="item" javaType="com.mybatis.demos.domain.Item">
                    <id column="item_id" property="itemId"></id>
                    <result column="item_name" property="itemName"></result>
                    <result column="item_price" property="itemPrice"></result>
                    <result column="item_des" property="itemDes"></result>
                </association>
            </collection>
        </collection>

    </resultMap>

    <!--
        配置查询所有，resultType的作用就是返回封装类型
        #{}方式是占位符方式
    -->
    <select id="findUserById" parameterType="int" resultType="com.mybatis.demos.domain.User">
        select * from user where id = #{value}
    </select>

    <!--
        ${}是拼接sql语句方式，容易引起sql注入
    -->
    <select id="findUserByName" parameterType="String" resultType="com.mybatis.demos.domain.User">
      select * from user where name like '%${value}'
    </select>

    <insert id="insertOneUser" parameterType="com.mybatis.demos.domain.User">
        <!--
          将插入的自增对象记录的主键返回到java对象中
          LAST_INSERT_ID()函数得到insert 记录的主键值，只适用于自增主键
          keyProperty 表示将查询到的主键值注入到parameterType指定的对象的属性中
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="int">
            select LAST_INSERT_ID()
        </selectKey>
        insert into user (id, username, `name`, password, create_time) values (#{id}, #{username}, #{name}, #{password},
        #{createTime})
    </insert>

    <delete id="deleteUserById" parameterType="com.mybatis.demos.domain.User">
        delete from user where id = #{id}
    </delete>
    
    <update id="updateUser" parameterType="com.mybatis.demos.domain.User">
        update user set `name` = #{name}, username = #{username} where id = #{id}
    </update>

    <!-- 动态sql， 条件判断-->
    <select id="findUserByParam" resultType="com.mybatis.demos.domain.User">
        select * from user
        <!--wehere 标签会自动去掉第一个and / or-->
        <where>
            <!-- 引用sql片段，如果id不在本xml中，需要加namespace-->
            <include refid="userParams"></include>
        </where>
    </select>

    <!-- 动态sql， 条件判断
        使用resultMap
    -->
    <select id="findByParam" resultMap="userResultMap">
        select id, username, name, password, create_time from user
        <!--wehere 标签会自动去掉第一个and / or-->
        <where>
            <!-- 引用sql片段，如果id不在本xml中，需要加namespace-->
            <include refid="userParams"></include>
        </where>
    </select>

    <select id="findUserItemAllByParam" resultMap="userItemMap">
        select
          *
        from
            user,
            orders,
            order_detail,
            item
        <where>
            user.id = orders.user_id
            and orders.id = order_detail.order_id
            and order_detail.item_id = item.item_id
            <if test="usernames != null and usernames.size() > 0">
                and username in
                <foreach collection="usernames" item="username" open="(" separator="," close=")">
                    #{username}
                </foreach>
            </if>
        </where>
    </select>
    <!--
        定义sql 片段：
            注意事项：
                1. id  sql片段的唯一标识
            经验：
                1. 基于单表定义sql片段，可重用性高
                2. sql片段中不要包含where标签
    -->
    <sql id="userParams">
        <if test="name != null and name != ''">
            and name = #{name}
        </if>
        <if test="username != null and username != ''">
            and username = #{username}
        </if>
        <!--
            collection: 要遍历的集合
            item: 遍历的集合中单向的对象名
            open: 开始遍历时拼接的字符串
            close:结束遍历时拼接的字符串
            separator: 遍历过程，相连两个对象要拼接的串
        -->
        <if test="usernames != null and usernames.size() > 0">
            and username in
            <foreach collection="usernames" item="username" open="(" close=")" separator=",">
                #{username}
            </foreach>
        </if>

        <if test="ids != null and ids.size() > 0">
            and
            <foreach collection="ids" item="id" open="(" close=")" separator="or">
                id = #{id}
            </foreach>
        </if>
    </sql>
</mapper>